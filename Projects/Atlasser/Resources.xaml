<ResourceDictionary 
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:controls="clr-namespace:Atlasser.Controls">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="Colours.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <Style TargetType="{x:Type TextBlock}">
        <Setter Property="FontFamily" Value="Segoe UI"/>
        <Setter Property="TextOptions.TextRenderingMode" Value="Auto"/>
        <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}"/>
        <Setter Property="TextTrimming" Value="CharacterEllipsis"/>
        <Setter Property="FontWeight" Value="Normal"/>
        <Setter Property="FontSize" Value="10"/>
    </Style>

    <!-- Medium Header -->
    <Style x:Key="MediumHeaderStyle" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource {x:Type TextBlock}}">
        <Setter Property="FontSize" Value="13"/>
    </Style>

    <!-- Large Header -->
    <Style x:Key="LargeHeaderStyle" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource {x:Type TextBlock}}">
        <Setter Property="FontSize" Value="18"/>
        <Setter Property="FontWeight" Value="Light"/>
    </Style>

    <Style x:Key="LargeBoldHeaderStyle" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource LargeHeaderStyle}">
        <Setter Property="FontWeight" Value="Bold"/>
    </Style>

    <!-- Extra Large Header -->
    <Style x:Key="ExtraLargeHeaderStyle" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource {x:Type TextBlock}}">
        <Setter Property="FontSize" Value="32"/>
        <Setter Property="FontWeight" Value="Light"/>
    </Style>
    
    <VisualBrush 
        x:Key="DiagonalLineBrush"
        TileMode="Tile" 
        Viewport="0 0 10 10" 
        ViewportUnits="Absolute"
        Opacity="0.5">
        <VisualBrush.Visual>
            <Path Stroke="{StaticResource GrayLightBrush}" Data="M 0 0 l 10 10" />
        </VisualBrush.Visual>
    </VisualBrush>

    <VisualBrush 
        x:Key="HatchPattern"
        TileMode="Tile" 
        Viewport="0 0 10 10" 
        ViewportUnits="Absolute"
        Opacity="0.5"
        x:Shared="False">
        <VisualBrush.Visual>
            <Canvas>
                <Path Stroke="{StaticResource GrayLightBrush}" Data="M 0 0 l 10 10" />
                <Path Stroke="{StaticResource GrayLightBrush}" Data="M 0 10 l 10 -10" />
            </Canvas>
        </VisualBrush.Visual>
    </VisualBrush>

    <Style TargetType="controls:WindowChromeBorder">
        <Setter Property="BorderBrush" Value="{StaticResource GrayHeavyBrush}"/>
        <Setter Property="BorderThickness" Value="0.5"/>
        <Setter Property="Background" Value="White"/>
    </Style>

    <Style x:Key="ButtonBorderStyle" TargetType="{x:Type Border}">
        <Setter Property="Padding" Value="2"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
    </Style>
    
    <Style x:Key="BlockButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="{StaticResource ThemeIndependantLightBrush}"/>
        <Setter Property="Background" Value="{StaticResource GrayMediumBrush}"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Padding" Value="15 5 15 5"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border 
                        Background="{TemplateBinding Background}"
                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                        Padding="{TemplateBinding Padding}">
                        <ContentPresenter/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource AccentLightBrush}"/>
                <Setter Property="Foreground" Value="{StaticResource ThemeIndependantLightBrush}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{StaticResource AccentHeavyBrush}"/>
                <Setter Property="Foreground" Value="{StaticResource ThemeIndependantLightBrush}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.2"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <Style x:Key="SmallBlockButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource BlockButtonStyle}">
        <Setter Property="Width" Value="30"/>
        <Setter Property="Height" Value="30"/>
        <Setter Property="Background" Value="Transparent"/>
    </Style>

    <!-- Default ListBox style. -->
    <Style TargetType="{x:Type ListBox}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Foreground" Value="{StaticResource GrayHeavyBrush}"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBox}">
                    <Border 
                        x:Name="Bd" 
                        BorderBrush="{TemplateBinding BorderBrush}" 
                        BorderThickness="{TemplateBinding BorderThickness}" 
                        Background="{TemplateBinding Background}" 
                        Padding="{TemplateBinding Padding}" 
                        SnapsToDevicePixels="True">
                        <ScrollViewer 
                            Focusable="False" 
                            Padding="{TemplateBinding Padding}">
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="Bd" Value="0.3"/>
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="True">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ListItemRadioButton" TargetType="{x:Type RadioButton}">
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Foreground" Value="{StaticResource ForegroundBrush}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Padding" Value="2 0 0 0"/>
        <Setter Property="Opacity" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Border
                        x:Name="container"
                        BorderBrush="{TemplateBinding BorderBrush}" 
                        BorderThickness="{TemplateBinding BorderThickness}" 
                        Background="{TemplateBinding Background}" 
                        Padding="{TemplateBinding Padding}" 
                        SnapsToDevicePixels="True">
                        <ContentPresenter 
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Background" Value="{StaticResource AccentLightBrush}"/>
                <Setter Property="Foreground" Value="{StaticResource ThemeIndependantLightBrush}"/>
            </Trigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="False"/>
                    <Condition Property="IsMouseOver" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{StaticResource GrayLightBrush}"/>
            </MultiTrigger>

            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.3"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Default ListBoxItem style. -->
    <Style TargetType="{x:Type ListBoxItem}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Opacity" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border
                        x:Name="container"
                        BorderBrush="{TemplateBinding BorderBrush}" 
                        BorderThickness="{TemplateBinding BorderThickness}" 
                        Background="{TemplateBinding Background}" 
                        Padding="{TemplateBinding Padding}" 
                        SnapsToDevicePixels="True">
                        <ContentPresenter 
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{StaticResource AccentMediumBrush}"/>
                <Setter Property="Foreground" Value="{StaticResource ThemeIndependantLightBrush}"/>
            </Trigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="False"/>
                    <Condition Property="IsMouseOver" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{StaticResource AccentLightBrush}"/>
            </MultiTrigger>

            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.3"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Default ComboBox style. -->
    <Style x:Key="ComboBoxReadonlyToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="ClickMode" Value="Press"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border
                        x:Name="border"
                        BorderThickness="2"
                        CornerRadius="0"
                        BorderBrush="{DynamicResource GrayLightBrush}"
                        Background="{DynamicResource GrayLightBrush}"
                        SnapsToDevicePixels="True">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <ContentPresenter
                                Grid.Column="0"
                                HorizontalAlignment="Left"
                                VerticalAlignment="Center"/>
                            <Path 														
                                x:Name="arrow"
                                Grid.Column="1"
                                Fill="{DynamicResource GrayHeavyBrush}" 
                                HorizontalAlignment="Center" 
                                Margin="0 1 5 0" 
                                VerticalAlignment="Center"
                                Data="F1M11.82,3.529C12.019,3.341 12.019,3.036 11.82,2.849 11.82,2.849 11.106,2.169 11.106,2.169 10.909,1.981 10.59,1.981 10.393,2.169 10.393,2.169 7,5.447 7,5.447 7,5.447 3.577,2.142 3.577,2.142 3.378,1.953 3.059,1.953 2.862,2.142 2.862,2.142 2.148,2.822 2.148,2.822 1.951,3.009 1.951,3.313 2.148,3.502 2.148,3.502 6.641,7.829 6.641,7.829 6.84,8.016 7.159,8.016 7.356,7.829 7.356,7.829 11.82,3.529 11.82,3.529z"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource GrayHeavyBrush}"/>
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource BackgroundBrush}"/>
                            <Setter Property="BorderThickness" TargetName="border" Value="2 2 2 0"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource GrayHeavyBrush}"/>
                            <Setter Property="Fill" TargetName="arrow" Value="{DynamicResource ForegroundBrush}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource GrayHeavyBrush}"/>
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource BackgroundBrush}"/>
                            <Setter Property="BorderThickness" TargetName="border" Value="2 2 2 0"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style TargetType="{x:Type ComboBox}">
        <Setter Property="BorderBrush" Value="{DynamicResource GrayLightBrush}"/>
        <Setter Property="Background" Value="{DynamicResource GrayLightBrush}"/>
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="MaxWidth" Value="250"/>
        <Setter Property="MinHeight" Value="30"/>
        <Setter Property="Padding" Value="7 0 5 0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid 
                        x:Name="MainGrid" 
                        SnapsToDevicePixels="True"
                        VerticalAlignment="Stretch">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
                        </Grid.ColumnDefinitions>
                        <Popup 
                            x:Name="PART_Popup" 
                            AllowsTransparency="True" 
                            Grid.ColumnSpan="2" 
                            IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}" 
                            Margin="0" 
                            PopupAnimation="Fade" 
                            Placement="Bottom">
                            <Border 
                                x:Name="dropDownBorder" 
                                BorderBrush="{DynamicResource GrayHeavyBrush}" 
                                BorderThickness="2 0 2 2" 
                                Background="{DynamicResource BackgroundBrush}"
                                MinWidth="{Binding ActualWidth, ElementName=MainGrid}">
                                <ScrollViewer x:Name="dropDownScrollViewer">
                                    <Grid RenderOptions.ClearTypeHint="Enabled">
                                        <Canvas 
                                            HorizontalAlignment="Left" 
                                            Height="0" 
                                            VerticalAlignment="Top" 
                                            Width="0">
                                            <Rectangle 
                                                x:Name="opaqueRect" 
                                                Fill="{Binding Background, ElementName=dropDownBorder}" 
                                                Height="{Binding ActualHeight, ElementName=dropDownBorder}" 
                                                Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
                                        </Canvas>
                                        <ItemsPresenter 
                                            x:Name="itemsPresenter" 
                                            KeyboardNavigation.DirectionalNavigation="Contained" 
                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                    </Grid>
                                </ScrollViewer>
                            </Border>
                        </Popup>

                        <ToggleButton 
                            BorderBrush="{TemplateBinding BorderBrush}" 
                            Background="{TemplateBinding Background}" 
                            Grid.ColumnSpan="2" 
                            IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" 
                            Style="{StaticResource ComboBoxReadonlyToggleButton}"
                            VerticalAlignment="Stretch"/>

                        <ContentPresenter 
                            ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" 
                            ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" 
                            Content="{TemplateBinding SelectionBoxItem}" 
                            ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" 
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                            IsHitTestVisible="False" Margin="{TemplateBinding Padding}" 
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                            VerticalAlignment="Center"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasItems" Value="False">
                            <Setter Property="Height" TargetName="dropDownBorder" Value="95"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.3"/>
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="True">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
                        </Trigger>
                        <Trigger Property="ScrollViewer.CanContentScroll" SourceName="dropDownScrollViewer" Value="False">
                            <Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=dropDownScrollViewer}"/>
                            <Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=dropDownScrollViewer}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Default ComboBoxItem style. -->
    <Style TargetType="{x:Type ComboBoxItem}">
        <Setter Property="Padding" Value="5"/>
        <Setter Property="Background" Value="{DynamicResource BackgroundBrush}"/>
        <Setter Property="ToolTip" Value="{Binding Content, RelativeSource={RelativeSource Self}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border 
                        x:Name="Bd" 
                        BorderBrush="{TemplateBinding BorderBrush}" 
                        BorderThickness="{TemplateBinding BorderThickness}" 
                        Background="{TemplateBinding Background}" 
                        Padding="{TemplateBinding Padding}" 
                        SnapsToDevicePixels="True"
                        MaxWidth="{TemplateBinding MaxWidth}">
                        <ContentPresenter 
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsHighlighted" Value="True">
                            <Setter Property="Background" TargetName="Bd">
                                <Setter.Value>
                                    <SolidColorBrush Color="{DynamicResource AccentHeavyColor}" Opacity="0.3"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource GrayLightBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Default TextBox control style -->
    <Style TargetType="{x:Type TextBox}">
        <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}"/>
        <Setter Property="Background" Value="{DynamicResource GrayLightBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource GrayLightBrush}"/>
        <Setter Property="FontSize" Value="10"/>
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="MinHeight" Value="30"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="AllowDrop" Value="True"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="SelectionBrush" Value="{DynamicResource AccentHeavyBrush}"/>
        <Setter Property="SelectionOpacity" Value="0.4"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="CaretBrush" Value="{DynamicResource ForegroundBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border
                        x:Name="border"
                        BorderBrush="{TemplateBinding BorderBrush}" 
                        BorderThickness="{TemplateBinding BorderThickness}" 
                        Background="{TemplateBinding Background}" 
                        CornerRadius="0"
                        SnapsToDevicePixels="True"
                        ToolTipService.InitialShowDelay="800"
                        ToolTipService.BetweenShowDelay="2000"
                        ToolTipService.Placement="Bottom"
                        ToolTipService.HorizontalOffset="8">
                        <ScrollViewer 
                            x:Name="PART_ContentHost" 
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.2"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource ForegroundBrush}"/>
                        </Trigger>
                        <Trigger Property="IsReadOnly" Value="True">
                            <Setter Property="Background" Value="{DynamicResource GrayLightBrush}"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource GrayLightBrush}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsFocused" Value="True"/>
                                <Condition Property="IsReadOnly" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="{DynamicResource BackgroundBrush}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsFocused" Value="True"/>
                                <Condition Property="IsReadOnly" Value="False"/>
                                <Condition Property="Validation.HasError" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" Value="{DynamicResource AccentHeavyBrush}"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MinimiseButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource SmallBlockButtonStyle}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border 
                        Width="{TemplateBinding Width}"
                        Height="{TemplateBinding Height}"
                        Style="{StaticResource ButtonBorderStyle}"
                        Background="{TemplateBinding Background}">
                        <Grid 
                            Width="10" 
                            Height="10" 
                            VerticalAlignment="Center" 
                            HorizontalAlignment="Center">
                            <Path
                                Data="F1M1,1C1,1 1,3 1,3 1,3 11,3 11,3 11,3 11,1 11,1 11,1 1,1 1,1z"
                                Fill="{TemplateBinding Foreground}"
                                VerticalAlignment="Bottom"
                                HorizontalAlignment="Center"/>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MaximiseButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource SmallBlockButtonStyle}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border 
                        Width="{TemplateBinding Width}"
                        Height="{TemplateBinding Height}"
                        Style="{StaticResource ButtonBorderStyle}"
                        Background="{TemplateBinding Background}">
                        <Path
                            Data="F1M2,3C2,3 2,10 2,10 2,10 10,10 10,10 10,10 10,3 10,3 10,3 2,3 2,3z M1,1C1,1 11,1 11,1 11,1 11,11 11,11 11,11 1,11 1,11 1,11 1,1 1,1z"
                            Fill="{TemplateBinding Foreground}"
                            VerticalAlignment="Center"
                            HorizontalAlignment="Center"
                            IsHitTestVisible="False"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="RestoreButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource SmallBlockButtonStyle}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border 
                        Width="{TemplateBinding Width}"
                        Height="{TemplateBinding Height}"
                        Style="{StaticResource ButtonBorderStyle}"
                        Background="{TemplateBinding Background}">
                        <Path
                            Data="F1M2,6C2,6 2,10 2,10 2,10 7,10 7,10 7,10 7,6 7,6 7,6 2,6 2,6z M5,3C5,3 5,4 5,4 5,4 8,4 8,4 8,4 8,7 8,7 8,7 10,7 10,7 10,7 10,3 10,3 10,3 5,3 5,3z M4,1C4,1 11,1 11,1 11,1 11,8 11,8 11,8 8,8 8,8 8,8 8,11 8,11 8,11 1,11 1,11 1,11 1,4 1,4 1,4 4,4 4,4 4,4 4,1 4,1z"
                            Fill="{TemplateBinding Foreground}"
                            VerticalAlignment="Center"
                            HorizontalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CloseButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource SmallBlockButtonStyle}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border 
                        Width="{TemplateBinding Width}"
                        Height="{TemplateBinding Height}"
                        Style="{StaticResource ButtonBorderStyle}"
                        Background="{TemplateBinding Background}">
                        <Path
                            Data="F1M2,1C2,1 1,2 1,2 1,2 4,5 4,5 4,5 1,8 1,8 1,8 2,9 2,9 2,9 5,6 5,6 5,6 8,9 8,9 8,9 9,8 9,8 9,8 6,5 6,5 6,5 9,2 9,2 9,2 8,1 8,1 8,1 5,4 5,4 5,4 2,1 2,1z"
                            Fill="{TemplateBinding Foreground}"
                            VerticalAlignment="Center"
                            HorizontalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="LabelStyle" TargetType="TextBlock">
        <Setter Property="Width" Value="50"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="TextAlignment" Value="Right"/>
        <Setter Property="HorizontalAlignment" Value="Right"/>
        <Setter Property="Margin" Value="0 0 5 0"/>
    </Style>
</ResourceDictionary>